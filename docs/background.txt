##########
Background
##########

This section outlines the system being simulated as well as
some theoretical background of learning mechanisms.


**********
The system
**********
Figure 1 illustrates the system being simulated.

.. figure:: background-system-fig.png
  :align: center
  :alt: The system

  Figure 1: The world and the subject.

The system consists of a *subject* (or *organism*) interacting with a 
*world*.

The subject has a pre-defined set of behaviors - the *behavior repertoire*.
It also has an output function that determines which of these behaviors to respond with.
In addition, it has state transition functions that update memories and other internal states.

The world, which often is defined by an experiment, has a pre-defined set of stimulus elements - the *stimulus repertoire*. It also has an output function that determines which of these stimuli to
expose to the subject. In addition, it has state transitions functions that update the
state of the world. A stimulus :math:`S` consists either of one single stimulus element :math:`S=\{E\}` in the stimulus repertoire, or a set of two or more simultaneous elements :math:`S=\{E_1,E_2,\dotsc\}`. In the latter case, the stimulus is called a *compound* stimulus.

The behavior of the subject influences both the internal state of the subject and
the internal state of the world. Also, the stimulus that the world generates depends on the subject's behavior (being the response to the last
generated stimulus), and the behavior that the subject responds with depends on the stimulus
that it responds to.

The system operates in the discrete time steps
:math:`S_{1}\rightarrow B_{1}\rightarrow S_{2}\rightarrow B_{2}\rightarrow S_{3}\rightarrow\dotsc`,
in other words, the process starts with the world producing a stimulus :math:`S_1` at time step 1,
and the subject responds with behavior :math:`B_1` at time step 2, etc. It is this process that
is being simulated in `Learning Simulator`.
The Learning Simulator scripting language specifies all the properties of the 
subject, the world and the simulation. 

Technically, the world is a dynamical system whose state transition function depends on
the subject's last behavior, and outputs a stimulus. In the same way, the subject is a dynamical system whose state transition function depends on the last stimulus, and outputs a behavior.
Thus, the system being simulated consists of two interacting dynamical systems.

The world
=========
The world receives a behavior :math:`B` from the subject and responds with a stimulus
:math:`S` that may or may not depend on :math:`B`.
A description of the world specifies which stimulus is generated in each step and how it
depends on the behavior and internal state variables of the world.
In the `Learning Simulator` scripting language, this
is done the ``@phase`` section of the script. It basically consists of a number of labelled
lines, where each line specifies which stimulus to expose the subject to, and which line
to go to in the next step.

The subject and the mechanisms modelling its memory
===================================================
The subject is assumed to have an initial (genetic) value :math:`u_E` for each stimulus element :math:`E`. The subject is also assumed to have a *cost* :math:`c_B` associated with each behavior :math:`B` in its behavior repertoire. These :math:`u`- and :math:`c`-values do not change during the simulation.

When the subject observes a stimulus :math:`S` it makes a decision about which behavior :math:`B` (in the behavior repertoire) to respond with. This is done by the *decision function*; see below.

After observing the next stimulus :math:`S'` (being a consequence of the decision to respond with :math:`B`), the subject "learns" by updating an internal state variable
:math:`v` indexed by stimulus-response pairs (so that :math:`v_{E\rightarrow B}` is the value associated with the response :math:`B` to stimulus element :math:`E`). Some mechanisms also use a state variable :math:`w` indexed by stimulus elements (so that :math:`w_E` is the value associated with stimulus element :math:`E`). The table below shows the available learning mechanisms and how their state variables are updated after
the subject has experienced the steps

.. math::
  S \rightarrow B \rightarrow S'

where :math:`S=\{E_1, E_2, \dotsc\}` and :math:`S=\{E'_1, E'_2, \dotsc\}`. In the table the following notation is used:

.. math::
  u_S=\sum_{E\in S}u_E,\quad w_S=\sum_{E\in S}w_E,\quad \text{and}\quad v_{S\to B}=\sum_{E\in S}v_{E\to B}.

+-----------------------------+---------+------------------------+------------------------------------------------------------------------------------------------------------------+
| Mechanism                   | Abbrev. | Memory states          | Memory updates                                                                                                   |
+=============================+=========+========================+==================================================================================================================+
| Stimulus-Response learning  | SR      | :math:`v_{E\to B}`     | :math:`\Delta v_{E\to B}=\alpha_{E\to B}(u_{S'}-v_{S\to B}-c_B) \;\forall E\in S`                                |
+-----------------------------+---------+------------------------+------------------------------------------------------------------------------------------------------------------+
| Q-learning                  | QL      | :math:`v_{E\to B}`     | :math:`\Delta v_{E\to B}=\alpha_{E\to B}(u_{S'}-v_{S\to B}-c_B+\max_{B'}v_{S'\to B'}) \;\forall E\in S`          |
+-----------------------------+---------+------------------------+------------------------------------------------------------------------------------------------------------------+
| Expected SARSA              | ES      | :math:`v_{E\to B}`     | | :math:`\Delta v_{E\to B}=\alpha_{E\to B}(u_{S'}-v_{S\to B}-c_B+E(v_{S'\to B'})) \;\forall E\in S`              |
|                             |         |                        | | where :math:`E(v_{S'\to B'})= \sum_{E'\in S'}E(v_{E'\to B'})=\sum_{E'\in S'}\sum_{B'}\Pr(E'\to B')v_{E'\to B'}`|
+-----------------------------+---------+------------------------+------------------------------------------------------------------------------------------------------------------+
| Actor-critic                | AC      | | :math:`v_{E\to B}`   | | :math:`\Delta v_{E\to B}=\alpha_{E\to B}(u_{S'}+w_{S'}-w_{S}-c_B) \;\forall E\in S`                            |
|                             |         | | :math:`w_E`          | | :math:`\Delta w_E=\alpha_E (u_{S'}+w_{S'}-w_{S}-c_B)  \;\forall E\in S`                                        |
+-----------------------------+---------+------------------------+------------------------------------------------------------------------------------------------------------------+
| Guided associative learning | GA      | | :math:`v_{E\to B}`   | | :math:`\Delta v_{E\to B}=\alpha_{E\to B}(u_{S'}+w_{S'}-v_{S\to B}) \;\forall E\in S`                           |
|                             |         | | :math:`w_E`          | | :math:`\Delta w_{E}=\alpha_E (u_{S'}+w_{S'}-c_{B}-w_{S}) \;\forall E\in S`                                     |
+-----------------------------+---------+------------------------+------------------------------------------------------------------------------------------------------------------+
| Rescorla-Wagner             | RW      | :math:`v_{E_1\to E_2}` |                                                                                                                  |
+-----------------------------+---------+------------------------+------------------------------------------------------------------------------------------------------------------+

The decision function
---------------------
When the subject is exposed to a stimulus :math:`S=\{E_1,E_2,\dotsc\}`, it makes a decision about which behavior in the
behavior repertoire to respond with. This is done by associating each possible behavior :math:`B_i`
with a probability :math:`\Pr(S\rightarrow B_i)` and then choosing a response by sampling from
this probability distribution. In
``Learning Simulator`` a version of the so called *soft-max* rule is used to compute the probabilities:

.. math::
  \Pr(S\to B_{i})=\frac{\exp(\sum_{k}\beta v_{E_{k}\to B_{i}})}{\sum_{j}\exp(\sum_{k}\beta v_{E_{k}\to B_{j}})}

where the parameter :math:`\beta` controls the extent to which the decision is governed by the
:math:`v`-values: Smaller :math:`\beta` means more exploration in the reponse decision.

Notation
--------

The table below shows the notation used.

+------------+---------------------------------------------------------------------------------------+
| Symbol     | Description                                                                           |
+============+=======================================================================================+
| :math:`E`  | A stimulus element                                                                    |
+------------+---------------------------------------------------------------------------------------+
| :math:`S`  | A stimulus that consists of one or more stimulus elements :math:`\{E_1, E_2, \dotsc\}`|
+------------+---------------------------------------------------------------------------------------+
| :math:`B`  | A behavior                                                                            |
+------------+---------------------------------------------------------------------------------------+



